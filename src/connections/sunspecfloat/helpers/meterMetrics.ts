import { assertNonNull } from '../../../helpers/null.js';
import { type MeterModelfloat } from '../models/meter.js';
import { getSitePhasesFromMeter } from './sitePhases.js';

export function getMeterMetrics(meter: MeterModelfloat) {
    const phases = getSitePhasesFromMeter(meter);

    const scaledValues = {
        A: meter.A,
        AphA: meter.AphA,
        AphB: meter.AphB,
        AphC: meter.AphC,
        PhV: meter.PhV,
        PhVphA: meter.PhVphA,
        PhVphB: meter.PhVphB,
        PhVphC: meter.PhVphC,
        PPV: meter.PPV,
        PPVphAB: meter.PPVphAB,
        PPVphBC: meter.PPVphBC,
        PPVphCA: meter.PPVphCA,
        Hz: meter.Hz,
        W: meter.W,
        WphA: meter.WphA,
        WphB: meter.WphB,
        WphC: meter.WphC,
        VA: meter.VA,
        VAphA: meter.VAphA,
        VAphB: meter.VAphB,
        VAphC: meter.VAphC,
        VAR: meter.VAR,
        VARphA: meter.VARphA,
        VARphB: meter.VARphB,
        VARphC: meter.VARphC,
        PF: meter.PF,
        PFphA: meter.PFphA,
        PFphB: meter.PFphB,
        PFphC: meter.PFphC,
    };

    switch (phases) {
        case 'singlePhase': {
            return {
                phases,
                A: scaledValues.A,
                AphA: scaledValues.AphA,
                AphB: null,
                AphC: null,
                PhV: scaledValues.PhV,
                PhVphA: scaledValues.PhVphA,
                PhVphB: null,
                PhVphC: null,
                PPV: scaledValues.PPV,
                PPVphAB: scaledValues.PPVphAB,
                PPVphBC: null,
                PPVphCA: null,
                Hz: scaledValues.Hz,
                W: scaledValues.W,
                WphA: scaledValues.WphA,
                WphB: null,
                WphC: null,
                VA: scaledValues.VA,
                VAphA: scaledValues.VAphA,
                VAphB: null,
                VAphC: null,
                VAR: scaledValues.VAR,
                VARphA: scaledValues.VARphA,
                VARphB: null,
                VARphC: null,
                PF: scaledValues.PF,
                PFphA: scaledValues.PFphA,
                PFphB: null,
                PFphC: null,
            };
        }
        case 'splitPhase': {
            return {
                phases,
                A: scaledValues.A,
                AphA: scaledValues.AphA,
                AphB: assertNonNull(scaledValues.AphB),
                AphC: null,
                PhV: scaledValues.PhV,
                PhVphA: scaledValues.PhVphA,
                PhVphB: scaledValues.PhVphB,
                PhVphC: null,
                PPV: scaledValues.PPV,
                PPVphAB: scaledValues.PPVphAB,
                PPVphBC: null,
                PPVphCA: null,
                Hz: scaledValues.Hz,
                W: scaledValues.W,
                WphA: scaledValues.WphA,
                WphB: scaledValues.WphB,
                WphC: null,
                VA: scaledValues.VA,
                VAphA: scaledValues.VAphA,
                VAphB: scaledValues.VAphB,
                VAphC: null,
                VAR: scaledValues.VAR,
                VARphA: scaledValues.VARphA,
                VARphB: scaledValues.VARphB,
                VARphC: null,
                PF: scaledValues.PF,
                PFphA: scaledValues.PFphA,
                PFphB: scaledValues.PFphB,
                PFphC: null,
            };
        }
        case 'threePhase': {
            return {
                phases,
                A: scaledValues.A,
                AphA: scaledValues.AphA,
                AphB: assertNonNull(scaledValues.AphB),
                AphC: assertNonNull(scaledValues.AphC),
                PhV: scaledValues.PhV,
                PhVphA: scaledValues.PhVphA,
                PhVphB: scaledValues.PhVphB,
                PhVphC: scaledValues.PhVphC,
                PPV: scaledValues.PPV,
                PPVphAB: scaledValues.PPVphAB,
                PPVphBC: scaledValues.PPVphBC,
                PPVphCA: scaledValues.PPVphCA,
                Hz: scaledValues.Hz,
                W: scaledValues.W,
                WphA: scaledValues.WphA,
                WphB: scaledValues.WphB,
                WphC: scaledValues.WphC,
                VA: scaledValues.VA,
                VAphA: scaledValues.VAphA,
                VAphB: scaledValues.VAphB,
                VAphC: scaledValues.VAphC,
                VAR: scaledValues.VAR,
                VARphA: scaledValues.VARphA,
                VARphB: scaledValues.VARphB,
                VARphC: scaledValues.VARphC,
                PF: scaledValues.PF,
                PFphA: scaledValues.PFphA,
                PFphB: scaledValues.PFphB,
                PFphC: scaledValues.PFphC,
            };
        }
    }
}
