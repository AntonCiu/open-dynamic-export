import { z } from 'zod';

export const meterAggregatesSchema = z.object({
    site: z.object({
        last_communication_time: z.string(),
        instant_power: z.number(),
        instant_reactive_power: z.number(),
        instant_apparent_power: z.number(),
        frequency: z.number(),
        energy_exported: z.number(),
        energy_imported: z.number(),
        instant_average_voltage: z.number(),
        instant_average_current: z.number(),
        i_a_current: z.number(),
        i_b_current: z.number(),
        i_c_current: z.number(),
        last_phase_voltage_communication_time: z.string(),
        last_phase_power_communication_time: z.string(),
        last_phase_energy_communication_time: z.string(),
        timeout: z.number(),
        num_meters_aggregated: z.number(),
        instant_total_current: z.number(),
    }),
    battery: z.object({
        last_communication_time: z.string(),
        instant_power: z.number(),
        instant_reactive_power: z.number(),
        instant_apparent_power: z.number(),
        frequency: z.number(),
        energy_exported: z.number(),
        energy_imported: z.number(),
        instant_average_voltage: z.number(),
        instant_average_current: z.number(),
        i_a_current: z.number(),
        i_b_current: z.number(),
        i_c_current: z.number(),
        last_phase_voltage_communication_time: z.string(),
        last_phase_power_communication_time: z.string(),
        last_phase_energy_communication_time: z.string(),
        timeout: z.number(),
        num_meters_aggregated: z.number(),
        instant_total_current: z.number(),
    }),
    load: z.object({
        last_communication_time: z.string(),
        instant_power: z.number(),
        instant_reactive_power: z.number(),
        instant_apparent_power: z.number(),
        frequency: z.number(),
        energy_exported: z.number(),
        energy_imported: z.number(),
        instant_average_voltage: z.number(),
        instant_average_current: z.number(),
        i_a_current: z.number(),
        i_b_current: z.number(),
        i_c_current: z.number(),
        last_phase_voltage_communication_time: z.string(),
        last_phase_power_communication_time: z.string(),
        last_phase_energy_communication_time: z.string(),
        timeout: z.number(),
        instant_total_current: z.number(),
    }),
    solar: z.object({
        last_communication_time: z.string(),
        instant_power: z.number(),
        instant_reactive_power: z.number(),
        instant_apparent_power: z.number(),
        frequency: z.number(),
        energy_exported: z.number(),
        energy_imported: z.number(),
        instant_average_voltage: z.number(),
        instant_average_current: z.number(),
        i_a_current: z.number(),
        i_b_current: z.number(),
        i_c_current: z.number(),
        last_phase_voltage_communication_time: z.string(),
        last_phase_power_communication_time: z.string(),
        last_phase_energy_communication_time: z.string(),
        timeout: z.number(),
        num_meters_aggregated: z.number(),
        instant_total_current: z.number(),
    }),
});

export const systemStatusSoeSchema = z.object({ percentage: z.number() });

export const metersSiteSchema = z.array(
    z.object({
        id: z.number(),
        location: z.string(),
        type: z.string(),
        cts: z.array(z.boolean()),
        inverted: z.array(z.boolean()),
        connection: z.object({
            short_id: z.string(),
            device_serial: z.string(),
            https_conf: z.object({}).optional(),
        }),
        enable_grid_event_logging: z.boolean().optional(),
        Cached_readings: z.object({
            last_communication_time: z.string(),
            instant_power: z.number(),
            instant_reactive_power: z.number(),
            instant_apparent_power: z.number(),
            frequency: z.number(),
            energy_exported: z.number(),
            energy_imported: z.number(),
            instant_average_voltage: z.number(),
            instant_average_current: z.number(),
            i_a_current: z.number().optional(),
            i_b_current: z.number().optional(),
            i_c_current: z.number().optional(),
            last_phase_voltage_communication_time: z.string(),
            v_l1n: z.number().optional(),
            v_l2n: z.number().optional(),
            v_l3n: z.number().optional(),
            last_phase_power_communication_time: z.string(),
            real_power_a: z.number().optional(),
            real_power_b: z.number().optional(),
            real_power_c: z.number().optional(),
            reactive_power_a: z.number().optional(),
            reactive_power_b: z.number().optional(),
            reactive_power_c: z.number().optional(),
            last_phase_energy_communication_time: z.string(),
            serial_number: z.string(),
            version: z.string(),
            timeout: z.number(),
            instant_total_current: z.number(),
        }),
    }),
);

export const systemStatusSchema = z.object({
    // command_source: z.string(),
    battery_target_power: z.number(),
    battery_target_reactive_power: z.number(),
    nominal_full_pack_energy: z.number(),
    nominal_energy_remaining: z.number(),
    max_power_energy_remaining: z.number(),
    max_power_energy_to_be_charged: z.number(),
    max_charge_power: z.number(),
    max_discharge_power: z.number(),
    max_apparent_power: z.number(),
    instantaneous_max_discharge_power: z.number(),
    instantaneous_max_charge_power: z.number(),
    instantaneous_max_apparent_power: z.number(),
    // hardware_capability_charge_power: z.number(),
    // hardware_capability_discharge_power: z.number(),
    // hardware_capability_adjusted_charge_power: z.number(),
    // grid_services_power: z.number(),
    // system_island_state: z.string(),
    // available_blocks: z.number(),
    // available_charger_blocks: z.number(),
    // battery_blocks: z.array(
    //     z.object({
    //         Type: z.string(),
    //         PackagePartNumber: z.string(),
    //         PackageSerialNumber: z.string(),
    //         disabled_reasons: z.array(z.unknown()),
    //         pinv_state: z.string(),
    //         pinv_grid_state: z.string(),
    //         nominal_energy_remaining: z.number(),
    //         nominal_full_pack_energy: z.number(),
    //         p_out: z.number(),
    //         q_out: z.number(),
    //         v_out: z.number(),
    //         f_out: z.number(),
    //         i_out: z.number(),
    //         energy_charged: z.number(),
    //         energy_discharged: z.number(),
    //         off_grid: z.boolean(),
    //         vf_mode: z.boolean(),
    //         wobble_detected: z.boolean(),
    //         charge_power_clamped: z.boolean(),
    //         backup_ready: z.boolean(),
    //         OpSeqState: z.string(),
    //         version: z.string(),
    //     }),
    // ),
    // ffr_power_availability_high: z.number(),
    // ffr_power_availability_low: z.number(),
    // load_charge_constraint: z.number(),
    // max_sustained_ramp_rate: z.number(),
    // grid_faults: z.array(z.unknown()),
    // can_reboot: z.string(),
    // smart_inv_delta_p: z.number(),
    // smart_inv_delta_q: z.number(),
    // last_toggle_timestamp: z.string(),
    // solar_real_power_limit: z.number(),
    // score: z.number(),
    // blocks_controlled: z.number(),
    // primary: z.boolean(),
    // auxiliary_load: z.number(),
    // all_enable_lines_high: z.boolean(),
    // inverter_nominal_usable_power: z.number(),
    // system_available_charge_power_design_pf: z.number(),
    // system_available_discharge_power_design_pf: z.number(),
    // system_available_charge_power_unity_pf: z.number(),
    // system_available_discharge_power_unity_pf: z.number(),
    // system_charge_power_capability_design_pf: z.number(),
    // system_discharge_power_capability_design_pf: z.number(),
    // system_charge_power_capability_unity_pf: z.number(),
    // system_discharge_power_capability_unity_pf: z.number(),
    // system_adjusted_charge_power_capability_design_pf: z.number(),
    // system_adjusted_charge_power_capability_unity_pf: z.number(),
    // expected_energy_remaining: z.number(),
});
