import type { Logger } from 'pino';
import { logger as pinoLogger } from '../helpers/logger.js';
import EventEmitter from 'node:events';
import type { SiteSample, SiteSampleData } from './siteSample.js';
import type { Result } from '../helpers/result.js';

export abstract class SiteSamplePollerBase extends EventEmitter<{
    data: [
        {
            siteSample: SiteSample;
        },
    ];
}> {
    protected logger: Logger;
    private pollingIntervalMs;
    private pollingTimer: NodeJS.Timeout | null = null;

    constructor({
        meterName,
        pollingIntervalMs,
    }: {
        meterName: string;
        // how frequently at most to poll the site sample data
        pollingIntervalMs: number;
    }) {
        super();

        this.pollingIntervalMs = pollingIntervalMs;
        this.logger = pinoLogger.child({
            module: 'SiteSamplePollerBase',
            meterName,
        });
    }

    public destroy() {
        if (this.pollingTimer) {
            clearTimeout(this.pollingTimer);
        }

        this.onDestroy();
    }

    abstract getSiteSampleData(): Promise<Result<SiteSampleData>>;

    abstract onDestroy(): void;

    protected async startPolling() {
        const start = performance.now();
        const now = new Date();

        this.logger.trace('generating site sample data');

        const siteSampleData = await this.getSiteSampleData();

        if (siteSampleData.success) {
            const siteSample = {
                // append current date to the site sample data
                date: now,
                ...siteSampleData.value,
            };

            this.logger.trace({ siteSample }, 'generated site sample data');

            this.emit('data', {
                siteSample,
            });
        } else {
            this.logger.warn('Error loading site sample data');
        }

        const end = performance.now();

        this.logger.trace({ duration: end - start }, 'run time');

        // this loop must meet sampling requirements and dynamic export requirements
        // Energex SEP2 Client Handbook specifies "As per the standard, samples should be taken every 200ms (10 cycles). If not capable of sampling this frequently, 1 second samples may be sufficient."
        // SA Power Networks â€“ Dynamic Exports Utility Interconnection Handbook specifies "Average readings shall be generated by sampling at least every 5 seconds. For example, sample rates of less than 5 seconds are permitted."
        const duration = end - start;

        // we don't want to run this loop any more frequently than the polling interval to prevent overloading the connection
        const delay = Math.max(this.pollingIntervalMs - duration, 0);

        this.pollingTimer = setTimeout(() => {
            void this.startPolling();
        }, delay);
    }
}
