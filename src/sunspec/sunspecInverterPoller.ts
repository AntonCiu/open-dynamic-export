import type { InverterSunSpecConnection } from './connection/inverter.js';
import EventEmitter from 'events';
import { logger as pinoLogger } from '../helpers/logger.js';
import { generateDerSample } from '../coordinator/helpers/derSample.js';
import {
    generateInverterData,
    type InvertersData,
} from '../coordinator/helpers/inverterData.js';

const logger = pinoLogger.child({ module: 'SunSpecInverterPoller' });

export class SunSpecInverterPoller extends EventEmitter<{
    data: [InvertersData];
}> {
    private invertersConnections: InverterSunSpecConnection[];

    constructor({
        invertersConnections,
    }: {
        invertersConnections: InverterSunSpecConnection[];
    }) {
        super();

        this.invertersConnections = invertersConnections;

        void this.run();
    }

    async run() {
        const start = performance.now();

        try {
            const invertersData = await Promise.all(
                this.invertersConnections.map(async (inverter) => {
                    // it's not practical to parallelize these calls because the ModBus connection can only practically handle one request at a time
                    // the best we can do is parallelize multiple inverters and meters which are independent connections
                    return {
                        inverter: await inverter.getInverterModel(),
                        nameplate: await inverter.getNameplateModel(),
                        settings: await inverter.getSettingsModel(),
                        status: await inverter.getStatusModel(),
                        controls: await inverter.getControlsModel(),
                    };
                }),
            );

            logger.trace({ invertersData }, 'received data');

            const inverters = invertersData.map((data) =>
                generateInverterData(data),
            );

            const derSample = generateDerSample({
                inverters: invertersData.map(({ inverter }) => inverter),
            });

            logger.trace({ derSample }, 'generated DER sample');

            const end = performance.now();

            logger.trace({ duration: end - start }, 'run time');

            this.emit('data', {
                inverters,
                derSample,
            });
        } catch (error) {
            logger.error({ error }, 'Failed to poll SunSpec inverters');
        } finally {
            // this loop must meet sampling requirements and dynamic export requirements
            // Energex SEP2 Client Handbook specifies "As per the standard, samples should be taken every 200ms (10 cycles). If not capable of sampling this frequently, 1 second samples may be sufficient."
            // SA Power Networks â€“ Dynamic Exports Utility Interconnection Handbook specifies "Average readings shall be generated by sampling at least every 5 seconds. For example, sample rates of less than 5 seconds are permitted."
            // we don't want to run this loop any more frequently than every 200ms to prevent overloading the SunSpec connection
            const end = performance.now();
            const duration = end - start;
            const delay = Math.max(200 - duration, 0);

            setTimeout(() => {
                void this.run();
            }, delay);
        }
    }
}
