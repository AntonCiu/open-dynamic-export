import type { InverterSunSpecConnection } from './connection/inverter.js';
import EventEmitter from 'events';
import { logger as pinoLogger } from '../helpers/logger.js';
import { generateDerSample } from '../coordinator/helpers/derSample.js';
import type {
    InverterData,
    InvertersPolledData,
} from '../coordinator/helpers/inverterData.js';
import { generateInverterData } from '../coordinator/helpers/inverterData.js';
import type { Result } from '../helpers/result.js';

const logger = pinoLogger.child({ module: 'SunSpecInverterPoller' });

export class SunSpecInverterPoller extends EventEmitter<{
    data: [InvertersPolledData];
}> {
    private invertersConnections: InverterSunSpecConnection[];

    constructor({
        invertersConnections,
    }: {
        invertersConnections: InverterSunSpecConnection[];
    }) {
        super();

        this.invertersConnections = invertersConnections;

        void this.run();
    }

    async run() {
        const start = performance.now();

        const invertersData = await Promise.all(
            this.invertersConnections.map(
                async (inverter): Promise<Result<InverterData>> => {
                    try {
                        const models = {
                            inverter: await inverter.getInverterModel(),
                            nameplate: await inverter.getNameplateModel(),
                            settings: await inverter.getSettingsModel(),
                            status: await inverter.getStatusModel(),
                            controls: await inverter.getControlsModel(),
                        };

                        logger.trace({ models }, 'received model data');

                        const inverterData = generateInverterData(models);

                        return {
                            success: true,
                            value: inverterData,
                        };
                    } catch (error) {
                        logger.error({ error }, 'Failed to get inverter data');

                        return {
                            success: false,
                            error: new Error(
                                `Error loading inverter data: ${error instanceof Error ? error.message : 'Unknown error'}`,
                            ),
                        };
                    }
                },
            ),
        );

        logger.trace({ invertersModelData: invertersData }, 'received data');

        const successInvertersData = invertersData
            .filter((data) => data.success)
            .map((data) => data.value);

        const derSample = generateDerSample({
            invertersData: successInvertersData,
        });

        logger.trace({ derSample }, 'generated DER sample');

        const end = performance.now();

        logger.trace({ duration: end - start }, 'run time');

        this.emit('data', {
            invertersData: successInvertersData,
            derSample,
        });

        // this loop must meet sampling requirements and dynamic export requirements
        // Energex SEP2 Client Handbook specifies "As per the standard, samples should be taken every 200ms (10 cycles). If not capable of sampling this frequently, 1 second samples may be sufficient."
        // SA Power Networks â€“ Dynamic Exports Utility Interconnection Handbook specifies "Average readings shall be generated by sampling at least every 5 seconds. For example, sample rates of less than 5 seconds are permitted."
        // we don't want to run this loop any more frequently than every 200ms to prevent overloading the SunSpec connection
        const duration = end - start;
        const delay = Math.max(200 - duration, 0);

        setTimeout(() => {
            void this.run();
        }, delay);
    }
}
