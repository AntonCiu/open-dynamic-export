/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/state/{state}/renewables/current": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns the current percentage of renewables in the grid */
        get: operations["getCurrentRenewables"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Return all sites linked to your account */
        get: operations["getSites"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sites/{siteId}/prices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns all the prices between the start and end dates */
        get: operations["getPrices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sites/{siteId}/prices/current": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns the current price */
        get: operations["getCurrentPrices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sites/{siteId}/usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns all usage data between the start and end dates. The API can only return 90-days worth of data. */
        get: operations["getUsage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Describes a power meter channel.
         *
         *     The General channel provides continuous power - it's the channel all of your appliances and lights are attached to.
         *
         *     Controlled loads are only on for a limited time during the day (usually when the load on the network is low, or generation is high) - you may have your hot water system attached to this channel.
         *
         *     The feed in channel sends power back to the grid - you will have these types of channels if you have solar or batteries. */
        Channel: {
            /**
             * @description Identifier of the channel
             * @example E1
             */
            identifier: string;
            type: components["schemas"]["ChannelType"];
            /**
             * @description The tariff code of the channel
             * @example A100
             */
            tariff: string;
        };
        Site: {
            /**
             * @description Unique Site Identifier
             * @example 01F5A5CRKMZ5BCX9P1S4V990AM
             */
            id: string;
            /**
             * @description National Metering Identifier (NMI) for the site
             * @example 3052282872
             */
            nmi: string;
            /** @description List of channels that are readable from your meter */
            channels: components["schemas"]["Channel"][];
            /**
             * @description The name of the site's network
             * @example Jemena
             */
            network: string;
            /**
             * @description Site status.
             *
             *     Pending sites are still in the process of being transferred. Note: We only include sites that have correct address details. If you expect to see a site, but don't, you may need to contact [info@amber.com.au](mailto:info@amber.com.au) to check that the address is correct.
             *
             *     Active sites are ones that we actively supply electricity to.
             *
             *     Closed sites are old sites that we no longer supply.
             * @example active
             * @enum {string}
             */
            status: "pending" | "active" | "closed";
            /**
             * @description Date the site became active. This date will be in the future for pending sites. It may also be undefined, though if it is, contact [info@amber.com.au](mailto:info@amber.com.au) - there may be an issue with your address. Formatted as a ISO 8601 date when present.
             * @example 2022-01-01
             */
            activeFrom?: string;
            /**
             * @description Date the site closed. Undefined if the site is pending or active. Formatted as a ISO 8601 date when present.
             * @example 2022-05-01
             */
            closedOn?: string;
        };
        /**
         * @description Indicates whether this interval will potentially spike, or is currently in a spike state
         * @enum {string}
         */
        SpikeStatus: "none" | "potential" | "spike";
        /**
         * @description Describes the current price. Gives you an indication of how cheap the price is in relation to the average VMO and DMO. Note: Negative is no longer used. It has been replaced with extremelyLow.
         * @enum {string}
         */
        PriceDescriptor: "negative" | "extremelyLow" | "veryLow" | "low" | "neutral" | "high" | "spike";
        /**
         * @description Describes the state of renewables. Gives you an indication of how green power is right now
         * @enum {string}
         */
        RenewableDescriptor: "best" | "great" | "ok" | "notGreat" | "worst";
        /**
         * @description Meter channel type
         * @example general
         * @enum {string}
         */
        ChannelType: "general" | "controlledLoad" | "feedIn";
        /** @description When prices are particularly volatile, the API may return a range of NEM spot prices (c/kWh) that are possible. */
        Range: {
            /** @description Estimated minimum price (c/kWh) */
            min: number;
            /** @description Estimated maximum price (c/kWh) */
            max: number;
        };
        /** @description Information about how your tariff affects an interval */
        TariffInformation: {
            /**
             * @description The Time of Use period that is currently active. Only available if the site in on a time of use tariff
             * @enum {string}
             */
            period?: "offPeak" | "shoulder" | "solarSponge" | "peak";
            /**
             * @description The Time of Use season that is currently active. Only available if the site in on a time of use tariff
             * @enum {string}
             */
            season?: "default" | "summer" | "autumn" | "winter" | "spring" | "nonSummer" | "holiday" | "weekend" | "weekendHoliday" | "weekday";
            /** @description The block that is currently active. Only available in the site in on a block tariff */
            block?: number;
            /** @description Is this interval currently in the demand window? Only available if the site in on a demand tariff */
            demandWindow?: boolean;
        };
        /** @description One time interval */
        Interval: {
            /**
             * @description Length of the interval in minutes.
             * @enum {integer}
             */
            duration: 5 | 15 | 30;
            /**
             * @description NEM spot price (c/kWh). This is the price generators get paid to generate electricity, and what drives the variable component of your perKwh price - includes GST
             * @example 6.12
             */
            spotPerKwh: number;
            /**
             * @description Number of cents you will pay per kilowatt-hour (c/kWh) - includes GST
             * @example 24.33
             */
            perKwh: number;
            /**
             * Format: date
             * @description Date the interval belongs to (in NEM time). This may be different to the date component of nemTime, as the last interval of the day ends at 12:00 the following day. Formatted as a ISO 8601 date
             * @example 2021-05-05
             */
            date: string;
            /**
             * Format: date-time
             * @description The interval's NEM time. This represents the time at the end of the interval UTC+10. Formatted as a ISO 8601 time
             * @example 2021-05-06T12:30:00+10:00
             */
            nemTime: string;
            /**
             * Format: date-time
             * @description Start time of the interval in UTC. Formatted as a ISO 8601 time
             * @example 2021-05-05T02:00:01Z
             */
            startTime: string;
            /**
             * Format: date-time
             * @description End time of the interval in UTC. Formatted as a ISO 8601 time
             * @example 2021-05-05T02:30:00Z
             */
            endTime: string;
            /**
             * @description Percentage of renewables in the grid
             * @example 45
             */
            renewables: number;
            channelType: components["schemas"]["ChannelType"];
            tariffInformation?: components["schemas"]["TariffInformation"] | null;
            spikeStatus: components["schemas"]["SpikeStatus"];
            descriptor: components["schemas"]["PriceDescriptor"];
        };
        ActualInterval: components["schemas"]["Interval"] & {
            /** @enum {string} */
            type?: "ActualInterval";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "ActualInterval";
        };
        ForecastInterval: components["schemas"]["Interval"] & {
            /** @enum {string} */
            type?: "ForecastInterval";
            range?: components["schemas"]["Range"] | null;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "ForecastInterval";
        };
        CurrentInterval: components["schemas"]["Interval"] & {
            /** @enum {string} */
            type?: "CurrentInterval";
            range?: components["schemas"]["Range"] | null;
            /** @description Shows true the current price is an estimate. Shows false is the price has been locked in. */
            estimate: boolean;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "CurrentInterval";
        };
        Usage: components["schemas"]["Interval"] & {
            /** @enum {string} */
            type?: "Usage";
            /**
             * @description Meter channel identifier
             * @example E1
             */
            channelIdentifier: string;
            /** @description Number of kWh you consumed or generated. Generated numbers will be negative */
            kwh: number;
            /**
             * @description If the metering company has had trouble contacting your meter, they may make an estimate of your usage for that period. Billable data is data that will appear on your bill.
             * @enum {string}
             */
            quality: "estimated" | "billable";
            /** @description The total cost of your consumption or generation for this period - includes GST */
            cost: number;
        };
        /** @description Renewable data */
        Renewable: {
            type: string;
            /**
             * @description Length of the interval in minutes.
             * @enum {integer}
             */
            duration: 5 | 15 | 30;
            /**
             * Format: date
             * @description Date the interval belongs to (in NEM time). This may be different to the date component of nemTime, as the last interval of the day ends at 12:00 the following day. Formatted as a ISO 8601 date
             * @example 2021-05-05
             */
            date: string;
            /**
             * Format: date-time
             * @description The interval's NEM time. This represents the time at the end of the interval UTC+10. Formatted as a ISO 8601 time
             * @example 2021-05-06T12:30:00+10:00
             */
            nemTime: string;
            /**
             * Format: date-time
             * @description Start time of the interval in UTC. Formatted as a ISO 8601 time
             * @example 2021-05-05T02:00:01Z
             */
            startTime: string;
            /**
             * Format: date-time
             * @description End time of the interval in UTC. Formatted as a ISO 8601 time
             * @example 2021-05-05T02:30:00Z
             */
            endTime: string;
            /**
             * @description Percentage of renewables in the grid
             * @example 45
             */
            renewables: number;
            descriptor: components["schemas"]["RenewableDescriptor"];
        };
        ActualRenewable: components["schemas"]["Renewable"] & {
            /** @enum {string} */
            type?: "ActualRenewable";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "ActualRenewable";
        };
        ForecastRenewable: components["schemas"]["Renewable"] & {
            /** @enum {string} */
            type?: "ForecastRenewable";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "ForecastRenewable";
        };
        CurrentRenewable: components["schemas"]["Renewable"] & {
            /** @enum {string} */
            type?: "CurrentRenewable";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "CurrentRenewable";
        };
    };
    responses: {
        /** @description API key is missing or invalid */
        UnauthorizedError: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Internal Server Error */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
    };
    parameters: never;
    requestBodies: never;
    headers: {
        /** @description The number of requests allowed per rate limit window */
        "RateLimit-Limit": number;
        /** @description The remaining quota in the current rate limit window */
        "RateLimit-Remaining": number;
        /** @description The number of seconds until the rate limit window resets */
        "RateLimit-Reset": number;
        /** @description The rate limit policy.<br>See <a href="https://datatracker.ietf.org/doc/draft-ietf-httpapi-ratelimit-headers/" target="_blank" rel="noopener noreferrer">https://datatracker.ietf.org/doc/draft-ietf-httpapi-ratelimit-headers/</a> */
        "RateLimit-Policy": string;
    };
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getCurrentRenewables: {
        parameters: {
            query?: {
                /** @description Return the _next_ number of forecast intervals */
                next?: number;
                /** @description Return the _previous_ number of actual intervals. */
                previous?: number;
                /** @description Specify the required interval duration resolution. Valid options: 5, 30. Default: 30 */
                resolution?: 5 | 30;
            };
            header?: never;
            path: {
                /** @description State you would like the renewables for. Valid states: nsw, sa, qld, vic */
                state: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The current percentage of renewables in the grid. */
            200: {
                headers: {
                    "RateLimit-Limit": components["headers"]["RateLimit-Limit"];
                    "RateLimit-Remaining": components["headers"]["RateLimit-Remaining"];
                    "RateLimit-Reset": components["headers"]["RateLimit-Reset"];
                    "RateLimit-Policy": components["headers"]["RateLimit-Policy"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (components["schemas"]["ActualRenewable"] | components["schemas"]["CurrentRenewable"] | components["schemas"]["ForecastRenewable"])[];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description State not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSites: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of sites. */
            200: {
                headers: {
                    "RateLimit-Limit": components["headers"]["RateLimit-Limit"];
                    "RateLimit-Remaining": components["headers"]["RateLimit-Remaining"];
                    "RateLimit-Reset": components["headers"]["RateLimit-Reset"];
                    "RateLimit-Policy": components["headers"]["RateLimit-Policy"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Site"][];
                };
            };
            /** @description API key is missing or invalid */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPrices: {
        parameters: {
            query?: {
                /**
                 * @description Return all prices for each interval on and after this day. Defaults to today.
                 * @example 2021-05-05
                 */
                startDate?: string;
                /**
                 * @description Return all prices for each interval on and before this day. Defaults to today.
                 * @example 2021-05-05
                 */
                endDate?: string;
                /** @description Specify the required interval duration resolution. Valid options: 5, 30. Default: 30 */
                resolution?: 5 | 30;
            };
            header?: never;
            path: {
                /** @description ID of the site you are fetching prices for. Can be found using the `/sites` endpoint */
                siteId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of priced intervals<br><br>Return Order: General > Controlled Load > Feed In.<br><br>**NOTE**: If a channel is added or removed the index offset will change. It is best to filter or group the array by channel type. */
            200: {
                headers: {
                    "RateLimit-Limit": components["headers"]["RateLimit-Limit"];
                    "RateLimit-Remaining": components["headers"]["RateLimit-Remaining"];
                    "RateLimit-Reset": components["headers"]["RateLimit-Reset"];
                    "RateLimit-Policy": components["headers"]["RateLimit-Policy"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (components["schemas"]["ActualInterval"] | components["schemas"]["CurrentInterval"] | components["schemas"]["ForecastInterval"])[];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description API key is missing or invalid */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Site not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCurrentPrices: {
        parameters: {
            query?: {
                /** @description Return the _next_ number of forecast intervals */
                next?: number;
                /** @description Return the _previous_ number of actual intervals. */
                previous?: number;
                /** @description Specify the required interval duration resolution. Valid options: 30. Default: 30 */
                resolution?: 30;
            };
            header?: never;
            path: {
                /** @description ID of the site you are fetching prices for. Can be found using the `/sites` enpoint */
                siteId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The current price on all channels.<br><br>Return Order: General > Controlled Load > Feed In.<br><br>**NOTE**: If a channel is added or removed the index offset will change. It is best to filter or group the array by channel type. */
            200: {
                headers: {
                    "RateLimit-Limit": components["headers"]["RateLimit-Limit"];
                    "RateLimit-Remaining": components["headers"]["RateLimit-Remaining"];
                    "RateLimit-Reset": components["headers"]["RateLimit-Reset"];
                    "RateLimit-Policy": components["headers"]["RateLimit-Policy"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (components["schemas"]["ActualInterval"] | components["schemas"]["CurrentInterval"] | components["schemas"]["ForecastInterval"])[];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description API key is missing or invalid */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Site not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUsage: {
        parameters: {
            query: {
                /**
                 * @description Return all usage for each interval on and after this day.
                 * @example 2021-05-05
                 */
                startDate: string;
                /**
                 * @description Return all usage for each interval on and before this day.
                 * @example 2021-05-05
                 */
                endDate: string;
                /** @description Specify the required interval duration resolution. Valid options: 30. Default: 30 */
                resolution?: 30;
            };
            header?: never;
            path: {
                /** @description ID of the site you are fetching usage for. Can be found using the `/sites` enpoint */
                siteId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Usage for the requested period.<br><br>Return Order: General > Controlled Load > Feed In.<br><br>**NOTE**: If a channel is added or removed the index offset will change. It is best to filter or group the array by channel type. */
            200: {
                headers: {
                    "RateLimit-Limit": components["headers"]["RateLimit-Limit"];
                    "RateLimit-Remaining": components["headers"]["RateLimit-Remaining"];
                    "RateLimit-Reset": components["headers"]["RateLimit-Reset"];
                    "RateLimit-Policy": components["headers"]["RateLimit-Policy"];
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Usage"][];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description API key is missing or invalid */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Site not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
