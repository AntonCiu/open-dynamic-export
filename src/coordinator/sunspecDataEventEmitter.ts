import type { ControlsModel } from '../sunspec/models/controls';
import type { InverterModel } from '../sunspec/models/inverter';
import type { MeterModel } from '../sunspec/models/meter';
import { generateMonitoringSample, type MonitoringSample } from './monitoring';
import type { InverterSunSpecConnection } from '../sunspec/connection/inverter';
import type { MeterSunSpecConnection } from '../sunspec/connection/meter';
import { getAveragePowerRatio } from '../sunspec/helpers/controls';
import EventEmitter from 'events';
import { logger as pinoLogger } from '../logger';
import type { NameplateModel } from '../sunspec/models/nameplate';
import type { SettingsModel } from '../sunspec/models/settings';
import type { StatusModel } from '../sunspec/models/status';

const logger = pinoLogger.child({ module: 'sunspec-data-event-emitter' });

export class SunSpecDataEventEmitter extends EventEmitter<{
    data: [
        {
            invertersData: {
                inverter: InverterModel;
                nameplate: NameplateModel;
                settings: SettingsModel;
                status: StatusModel;
                controls: ControlsModel;
            }[];
            metersData: {
                meter: MeterModel;
            }[];
            monitoringSample: MonitoringSample;
            currentAveragePowerRatio: number;
        },
    ];
}> {
    private invertersConnections: InverterSunSpecConnection[];
    private metersConnections: MeterSunSpecConnection[];

    constructor({
        invertersConnections,
        metersConnections,
    }: {
        invertersConnections: InverterSunSpecConnection[];
        metersConnections: MeterSunSpecConnection[];
    }) {
        super();

        this.invertersConnections = invertersConnections;
        this.metersConnections = metersConnections;

        void this.run();
    }

    async run() {
        try {
            logger.trace('fetching data from inverter connections');

            // get necessary inverter data
            const invertersData = await Promise.all(
                this.invertersConnections.map(async (inverter) => {
                    return {
                        inverter: await inverter.getInverterModel(),
                        nameplate: await inverter.getNameplateModel(),
                        settings: await inverter.getSettingsModel(),
                        status: await inverter.getStatusModel(),
                        controls: await inverter.getControlsModel(),
                    };
                }),
            );

            logger.trace({ invertersData }, 'received inverters data');

            logger.trace('fetching data from meters connections');

            // get necessary meter data
            const metersData = await Promise.all(
                this.metersConnections.map(async (meter) => {
                    return {
                        meter: await meter.getMeterModel(),
                    };
                }),
            );

            logger.trace({ metersData }, 'received meters data');

            const monitoringSample = generateMonitoringSample({
                inverters: invertersData.map(({ inverter }) => inverter),
                meters: metersData.map(({ meter }) => meter),
            });

            logger.trace({ monitoringSample }, 'generated monitoring sample');

            // calculate current average inverter power ratio
            const currentAveragePowerRatio = getAveragePowerRatio(
                invertersData.map(({ controls }) => controls),
            );

            logger.trace(
                `current average power ratio: ${currentAveragePowerRatio}`,
            );

            this.emit('data', {
                invertersData,
                metersData,
                monitoringSample,
                currentAveragePowerRatio,
            });
        } catch (error) {
            logger.error({ error }, 'Failed to fetch SunSpec data');
        } finally {
            setTimeout(
                () => {
                    void this.run();
                },
                // this loop must meet sampling requirements and dynamic export requirements
                // Energex SEP2 Client Handbook specifies "As per the standard, samples should be taken every 200ms (10 cycles). If not capable of sampling this frequently, 1 second samples may be sufficient."
                // SA Power Networks â€“ Dynamic Exports Utility Interconnection Handbook specifies "Average readings shall be generated by sampling at least every 5 seconds. For example, sample rates of less than 5 seconds are permitted."
                200,
            );
        }
    }
}
